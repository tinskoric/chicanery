library(bslib)
library(emojifont)
library(emoGG)
library(ggiraph)
library(ggthemes)
library(ggpubr)
library(gridlayout)
library(patchwork)
library(plotly)
library(png)
library(Rfast)
library(shiny)
library(shinyChatR)
library(sf)
library(tidyverse)
#chatdata <- read_rds("data/chatdata.rds")
mapdata <- st_cast(read_rds("data/gamedata.rds"), "MULTIPOLYGON")
st_centroid(mapdata %>% filter(unit == "ARMY"))
st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(centroid)
(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(centroid))[1]
unlist(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(centroid))[1]
unlist(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(centroid))[2]
runApp()
unlist(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(centroid))[1]
unlist(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(geometry))[1]
unlist(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(geometry))[[1]]
as.list(st_centroid(mapdata %>% filter(unit == "ARMY")) %>% select(geometry))[[1]]
st_coordinates(mapdata %>% filter(unit == "ARMY"))
st_coordinates(mapdata %>% filter(unit == "ARMY"))[1]
st_coordinates(mapdata %>% filter(unit == "ARMY"))[2]
st_coordinates(mapdata %>% filter(unit == "ARMY"))[2,1]
st_coordinates(mapdata %>% filter(unit == "ARMY"))[,1]
st_coordinates(mapdata %>% filter(unit == "ARMY"))[2,2]
runApp()
runApp()
st_coordinates(mapdata %>% filter(unit == "NAVY"))[,1]
as.data.frame(st_coordinates(mapdata %>% filter(unit == "NAVY"))[,2])
runApp()
runApp()
map_pieces <- mapdata %>%
filter(unit != "none") %>%
st_coordinates()
map_pieces <- mapdata %>%
filter(unit != "none") %>%
st_coordinates() %>%
as.data.frame()
View(map_pieces)
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = st_coordinates()[1],
y = st_coordinates()[2])
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = st_coordinates()[,1],
y = st_coordinates()[,2])
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = st_coordinates(.)[,1],
y = st_coordinates(.)[,2])
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(lon = st_coordinates(.)[,1],
lat = st_coordinates(.)[,2])
map_pieces <- mapdata %>%
mutate(x = st_coordinates(.)[,1],
y = st_coordinates(.)[,2])
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = unlist(map(mapdata$geometry,1)),
y = unlist(map(mapdata$geometry,2)))
map_pieces <- mapdata %>%
filter(unit != "none")
View(map_pieces)
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = unlist(map(mapdata$centroid,1)),
y = unlist(map(mapdata$centroid,2)))
map_pieces <- mapdata %>%
filter(unit != "none") %>%
mutate(x = st_coordinates(centroid)[,1],
y = st_coordinates(centroid)[,2])
View(map_pieces)
runApp()
tile_bg <- ggplot() +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 3) == "SEA")), fill = "navy", color = "navy") +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 4) == "TILE")), fill = "beige", color = "black", linetype = "dashed", alpha = 0.3) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "black", size = 1.5) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "white", size = 1) +
theme_void() +
theme(
legend.position = "none",
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
)
library(htmltools)
library(htmltools)
library(ggiraph)
library(ggthemes)
library(pals)
library(nngeo)
library(sf)
library(svglite)
library(tidyverse)
map_data <- read_rds("data/gamedata.rds")
# generate background image (basically: maps [tile, prov, region] w/o country control)
#tile (notice how it's actually just empty? the lines of tiles are put there in game!)
tile_bg <- ggplot() +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 3) == "SEA")), fill = "navy", color = "navy") +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 4) == "TILE")), fill = "beige", color = "black", linetype = "dashed", alpha = 0.3) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "black", size = 1.5) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "white", size = 1) +
theme_void() +
theme(
legend.position = "none",
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
)
ggsave(tile_bg, filename = "data/map/tilemap.png", width = 2147, height = 2160, units = "px", dpi = 320)
tile_bg <- ggplot() +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 3) == "SEA")), fill = "navy", color = "navy") +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 4) == "TILE")), fill = "beige", color = "beige") +
geom_sf(data = (map_data %>% filter(substr(tile, 1, 4) == "TILE")), color = "black", linetype = "dashed", alpha = 0.3) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "black", size = 1.5) +
geom_sf(data = st_as_sf(as.data.frame(map_data) %>% filter(center == TRUE) %>% select(centroid)), color = "white", size = 1) +
theme_void() +
theme(
legend.position = "none",
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
)
ggsave(tile_bg, filename = "data/map/tilemap.png", width = 2147, height = 2160, units = "px", dpi = 320)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
